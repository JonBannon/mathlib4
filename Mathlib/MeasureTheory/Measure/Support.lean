/-
Copyright (c) 2025 Jon Bannon. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jon Bannon, Jireh Loreaux
-/

import Mathlib.MeasureTheory.Measure.MeasureSpace
import Mathlib.MeasureTheory.Measure.OpenPos
import Mathlib.MeasureTheory.Measure.MeasureSpaceDef
import Mathlib.Topology.Defs.Filter
import Mathlib.Order.Filter.SmallSets

/-!
# Support of a Measure

This file develops the theory of the **topological support** of a measure `Œº` on a
topological measurable space. The support is defined as the set of points whose every open
neighborhood has positive measure. We give equivalent characterizations, prove basic
measure-theoretic properties, and study interactions with sums, restrictions, and
absolute continuity. Under various Lindel√∂f conditions, the support is conull,
and various descriptions of the complement of the support are provided.

## Main definitions

* `Measure.support` : the support of a measure `Œº`, defined as
  `{x | ‚àÉ·∂† u in (ùìù x).smallSets, 0 < Œº u}` ‚Äî equivalently, every neighborhood of `x`
  has positive `Œº`-measure.

## Main results

* `mem_support_iff` and `mem_support_iff_forall` : filter-theoretic and
  neighborhood characterizations of membership in the support.
* `notMem_support_iff` and `notMem_support_iff_exists` : characterizations of lying
  outside the support.
* `support_eq_univ` : if `IsOpenPosMeasure Œº`, then the support of `Œº` is the whole space.
* `support_zero` : the support of the zero measure is empty.
* `support_mono` and `AbsolutelyContinuous.support_mono` : monotonicity of support under
  measure domination and absolute continuity.
* `support_add` : the support of the sum of two measures is the union of their supports.
* `support_eq_forall_isOpen` : description of the support via open sets.
* `compl_support_eq_sUnion` and `support_eq_sInter` : the complement of the support is the
  union of open measure-zero sets, and the support is the intersection of closed sets whose
  complements have measure zero.
* `isClosed_support` / `isOpen_compl_support` : topological closure properties of the support.
* `support_mem_ae_of_isLindelof` and `support_mem_ae` : under Lindel√∂f (or hereditarily
  Lindel√∂f) hypotheses, the support is conull.
* `measure_compl_support` and its corollaries (`nullMeasurableSet_support`, `measure_support`,
  `nonempty_support`, `nonempty_support_iff`) : measure-theoretic consequences, including that
  the complement has measure zero and nonemptiness criteria.
* `support_restrict_subset_closure`, `mem_support_restrict`, and
  `interior_inter_support` : interaction of support with restriction to a set and the
  relation between `interior s ‚à© Œº.support` and the support of `Œº.restrict s`.

## Notation

* `Œº.support` : the support of measure `Œº`.
* `(ùìù x).smallSets` : the frequently-small-sets filter used in the filter-theoretic definition.

## Implementation notes

Have to go through and resolve some of these, and remove the associated bullets!

* TO DO: Rename `MeasureTheory.measure_mono_null` as `MeasureTheory.Measure.mono_null`
  to enable dot notation. (In a separate PR?)
* The lemma `support_restrict_subset_closure_inter_support` is currently a placeholder and
  explicitly marked for replacement: it should be proved directly without relying on the
  existing commented strategy.
* The file mixes several related but conceptually separate themes (`Add`, `Restrict`,
  `AbsolutelyContinuous`); consider reorganizing so that core support theory is grouped, with
  extensions in well-delineated subsections or submodules.
* Some proofs contain ‚Äúgolf‚Äù comments or ad hoc constructions‚Äîadding focused docstrings and
  cleaning those proofs (and their invariants) will improve maintainability.

## Tags

measure theory, support, topological support, filter, Lindel√∂f, hereditarily Lindel√∂f,
absolute continuity, restriction, sum of measures, null measurable, conull
-/

section Support

namespace MeasureTheory

namespace Measure

open scoped Topology

variable {X : Type*} [TopologicalSpace X] [MeasurableSpace X]

/-- A point `x` is in the support of `Œº` if any open neighborhood of `x` has positive measure.
We provide the definition in terms of the filter-theoretic equivalent
`‚àÉ·∂† u in (ùìù x).smallSets, 0 < Œº u`. -/
protected def support (Œº : Measure X) : Set X := {x : X | ‚àÉ·∂† u in (ùìù x).smallSets, 0 < Œº u}

variable {Œº : Measure X}

lemma pos_mono {Œ± : Type*} [MeasurableSpace Œ±]
    (Œº : Measure Œ±) ‚¶És t : Set Œ±‚¶Ñ (h : s ‚äÜ t) (hs : 0 < Œº s) :
    0 < Œº t :=
  hs.trans_le <| Œº.mono h

theorem _root_.Filter.HasBasis.mem_measureSupport {Œπ : Sort*} {p : Œπ ‚Üí Prop}
    {s : Œπ ‚Üí Set X} {x : X} (hl : (ùìù x).HasBasis p s) :
    x ‚àà Œº.support ‚Üî ‚àÄ (i : Œπ), p i ‚Üí 0 < Œº (s i) :=
  Filter.HasBasis.frequently_smallSets (hl := hl) Œº.pos_mono

/-- A point `x` is in the support of measure `Œº` iff any neighborhood of `x` contains a
subset with positive measure. -/
lemma mem_support_iff {x : X} : x ‚àà Œº.support ‚Üî
    ‚àÉ·∂† u in (ùìù x).smallSets, 0 < Œº u := Iff.rfl

/-- A point `x` is in the support of measure `Œº` iff every neighborhood of `x` has positive
measure. -/
lemma mem_support_iff_forall (x : X) : x ‚àà Œº.support ‚Üî ‚àÄ U ‚àà ùìù x, 0 < Œº U :=
  Filter.HasBasis.mem_measureSupport <| (ùìù x).basis_sets

lemma support_eq_univ [Œº.IsOpenPosMeasure] : Œº.support = Set.univ :=
  Set.ext fun _ ‚Ü¶ mem_support_iff_forall _ |>.trans <| Iff.intro (fun _ ‚Ü¶ trivial)
    (fun _ _ ‚Ü¶ measure_pos_of_mem_nhds Œº)

lemma support_mono {ŒΩ : Measure X} (h : Œº ‚â§ ŒΩ) : Œº.support ‚â§ ŒΩ.support :=
  fun _ hx ‚Ü¶ mem_support_iff_forall _ |>.mpr fun _ hU ‚Ü¶
    lt_of_lt_of_le (mem_support_iff_forall _ |>.mp hx _ hU) (h _)

lemma AbsolutelyContinuous.support_mono {Œº ŒΩ : Measure X} (hŒºŒΩ : Œº ‚â™ ŒΩ) :
  Œº.support ‚â§ ŒΩ.support :=
  fun _ hx ‚Ü¶ mem_support_iff_forall _ |>.mpr fun _ hU ‚Ü¶
     zero_lt_iff.mpr <| mt (fun a ‚Ü¶ hŒºŒΩ a) <| ne_of_gt <| mem_support_iff_forall _ |>.mp hx _ hU

/-- A point `x` lies outside the support of `Œº` iff all of the subsets of one of its neighborhoods
have measure zero. -/
lemma notMem_support_iff {x : X} : x ‚àâ Œº.support ‚Üî ‚àÄ·∂† u in (ùìù x).smallSets, Œº u = 0 := by
  simp [mem_support_iff]

theorem _root_.Filter.HasBasis.notMem_measureSupport {Œπ : Sort*} {p : Œπ ‚Üí Prop}
    {s : Œπ ‚Üí Set X} {x : X} (hl : (ùìù x).HasBasis p s) :
    x ‚àâ Œº.support ‚Üî ‚àÉ i, p i ‚àß Œº (s i) = 0 := by
  simp only [hl.mem_measureSupport, not_forall, not_lt, nonpos_iff_eq_zero, bex_def]

@[simp]
lemma support_zero : (0 : Measure X).support = ‚àÖ := by
  ext; simp only [Set.mem_empty_iff_false, iff_false, notMem_support_iff]
  exact Filter.Eventually.of_forall <| congrFun rfl

/-- The support of the sum of two measures is the union of the supports. -/
lemma support_add (Œº ŒΩ : Measure X) :
  (Œº + ŒΩ).support = Œº.support ‚à™ ŒΩ.support := by
  ext; simp [mem_support_iff]

/-- A point `x` lies outside the support of `Œº` iff some neighborhood of `x` has measure zero. -/
lemma notMem_support_iff_exists {x : X} : x ‚àâ Œº.support ‚Üî ‚àÉ U ‚àà ùìù x, Œº U = 0 := by
  simp [mem_support_iff_forall]

/-- The support of a measure equals the set of points whose open neighborhoods
all have positive measure. -/
lemma support_eq_forall_isOpen : Œº.support =
    {x : X | ‚àÄ u : Set X, x ‚àà u ‚Üí IsOpen u ‚Üí 0 < Œº u} := by
  simp [Set.ext_iff, nhds_basis_opens _ |>.mem_measureSupport]

lemma isClosed_support {Œº : Measure X} : IsClosed Œº.support := by
  simp_rw [isClosed_iff_frequently, nhds_basis_opens _ |>.mem_measureSupport,
    nhds_basis_opens _ |>.frequently_iff]
  grind

lemma isOpen_compl_support {Œº : Measure X} : IsOpen Œº.support·∂ú :=
  isOpen_compl_iff.mpr Œº.isClosed_support

lemma subset_compl_support_of_isOpen {t : Set X} (ht : IsOpen t) (h : Œº t = 0) :
  t ‚äÜ Œº.support·∂ú := fun _ hx ‚Ü¶
  notMem_support_iff_exists.mpr ‚ü®t, ht.mem_nhds hx, h‚ü©

lemma compl_support_eq_sUnion : Œº.support·∂ú = ‚ãÉ‚ÇÄ {t : Set X | IsOpen t ‚àß Œº t = 0} := by
  ext x; simp only [Set.mem_compl_iff, Set.mem_sUnion, Set.mem_setOf_eq, and_right_comm,
     nhds_basis_opens x |>.notMem_measureSupport, fun t ‚Ü¶ and_comm (b := x ‚àà t)]

lemma support_eq_sInter : Œº.support = ‚ãÇ‚ÇÄ {t : Set X | IsClosed t ‚àß Œº t·∂ú = 0} := by
  ext x
  simp only [nhds_basis_opens x |>.mem_measureSupport, and_imp, Set.mem_sInter, Set.mem_setOf_eq]
  rw [‚Üê not_iff_not]
  push_neg
  constructor
  ¬∑ rintro ‚ü®t, ht, htc, htc1‚ü©; use t·∂ú; rw [‚Üê compl_compl t] at htc1 ht
    exact ‚ü®htc.isClosed_compl, nonpos_iff_eq_zero.mp htc1, Set.mem_compl_iff t·∂ú x |>.mp ht‚ü©
  ¬∑ rintro ‚ü®t, ht, htc, htc1‚ü©; use t·∂ú
    exact ‚ü®Set.mem_compl htc1, ht.isOpen_compl, le_of_eq htc‚ü©

section Lindelof

/-- If the complement of the support is Lindel√∂f, then the support of a measure is conull. -/
lemma support_mem_ae_of_isLindelof (h : IsLindelof Œº.support·∂ú) : Œº.support ‚àà ae Œº := by
  refine compl_compl Œº.support ‚ñ∏ h.compl_mem_sets_of_nhdsWithin fun s hs ‚Ü¶ ?_
  simpa [compl_mem_ae_iff, isOpen_compl_support.nhdsWithin_eq hs]
    using notMem_support_iff_exists.mp hs

variable [HereditarilyLindelofSpace X]

/-- In a hereditarily Lindel√∂f space, the support of a measure is conull. -/
lemma support_mem_ae : Œº.support ‚àà ae Œº :=
  support_mem_ae_of_isLindelof <| HereditarilyLindelof_LindelofSets Œº.support·∂ú

@[simp]
lemma measure_compl_support : Œº (Œº.support)·∂ú = 0 := support_mem_ae

open Set

lemma nonempty_inter_support_of_pos {s : Set X} (hŒº : 0 < Œº s) :
    (s ‚à© Œº.support).Nonempty := by
  by_contra H
  have :=  LE.le.not_gt <| (OuterMeasureClass.measure_mono Œº <| Disjoint.subset_compl_right
    <| disjoint_iff_inter_eq_empty.mpr <| Set.not_nonempty_iff_eq_empty.mp H).trans
      <| le_of_eq (measure_compl_support)
  contradiction

lemma nullMeasurableSet_compl_support : NullMeasurableSet (Œº.support·∂ú) Œº :=
  NullMeasurableSet.of_null measure_compl_support

@[simp]
lemma nullMeasurableSet_support : NullMeasurableSet Œº.support Œº :=
  NullMeasurableSet.compl_iff.mp nullMeasurableSet_compl_support

@[simp]
lemma measure_support : Œº Œº.support = Œº Set.univ :=
  measure_of_measure_compl_eq_zero measure_compl_support

lemma nonempty_support (hŒº : Œº ‚â† 0) : Œº.support.Nonempty :=
   Nonempty.right <| nonempty_inter_support_of_pos <| measure_univ_pos.mpr hŒº

lemma nonempty_support_iff : Œº.support.Nonempty ‚Üî Œº ‚â† 0 :=
  ‚ü®fun h e ‚Ü¶ (not_nonempty_iff_eq_empty.mpr <| congrArg Measure.support e |>.trans
    <| support_zero) h, fun h ‚Ü¶ nonempty_support h‚ü©

end Lindelof
section Restrict

lemma support_restrict_subset_closure [OpensMeasurableSpace X] {s : Set X} :
    (Œº.restrict s).support ‚äÜ closure s :=
  fun x hx ‚Ü¶
    ((mem_closure_iff_nhds.mpr) ‚àò (nhds_basis_opens x |>.forall_iff <| fun _ _ h
       ‚Ü¶ Set.Nonempty.mono <| by gcongr).mpr)
  fun U ‚ü®hxU, hU‚ü© ‚Ü¶ by
  by_cases H : (s ‚à© U).Nonempty
  ¬∑ exact Set.inter_nonempty_iff_exists_right.mpr H
  ¬∑ have h_restr : (Œº.restrict s) U = Œº (U ‚à© s) := by
      simp only [Measure.restrict_apply hU.measurableSet, Set.inter_comm]
    rw [nhds_basis_opens x |>.mem_measureSupport] at hx
    exact MeasureTheory.nonempty_of_measure_ne_zero
      (ne_of_gt <| h_restr ‚ñ∏ hx U ‚ü®hxU, hU‚ü©)

lemma mem_support_restrict [OpensMeasurableSpace X] {s : Set X} {x : X} :
    x ‚àà (Œº.restrict s).support ‚Üî ‚àÉ·∂† u in (ùìù[s] x).smallSets, 0 < Œº u := by
  rw [nhds_basis_opens x |>.mem_measureSupport,
    Filter.HasBasis.frequently_smallSets (hl := nhdsWithin_basis_open x s) (hq := pos_mono Œº)] at *
  constructor
  all_goals
  ¬∑ intro h i hi
    have D := h i hi
    rw [restrict_apply] at *
    ¬∑ exact D
    ¬∑ exact IsOpen.measurableSet hi.2

lemma interior_inter_support [OpensMeasurableSpace X] {s : Set X} :
    interior s ‚à© Œº.support ‚äÜ (Œº.restrict s).support := by
  intro x ‚ü®‚ü®y, hy1, hy2‚ü©, hxp‚ü©
  apply mem_support_restrict.mpr
  rw [Filter.HasBasis.frequently_smallSets (hl := nhdsWithin_basis_open x s) (hq := pos_mono Œº)]
  intro V ‚ü®hs1, hs2‚ü©
  rw [nhds_basis_opens x |>.mem_measureSupport] at hxp
  exact lt_of_lt_of_le (hxp (V ‚à© y) ‚ü®Set.mem_inter hs1 hy2, IsOpen.inter hs2 hy1.1‚ü©)
    <| OuterMeasureClass.measure_mono Œº <| Set.inter_subset_inter (fun ‚¶Éa‚¶Ñ a ‚Ü¶ a) hy1.2

-- Prove the following directly, without appeal to `support_restrict_subset_closure`

-- SO THE PROOF BELOW MUST BE REPLACED!

lemma support_restrict_subset_closure_inter_support [OpensMeasurableSpace X] {s : Set X} :
  (Œº.restrict s).support ‚äÜ closure s ‚à© Œº.support :=
  Set.subset_inter (support_restrict_subset_closure) (support_mono restrict_le_self)

end Restrict

end Measure

end MeasureTheory

end Support
